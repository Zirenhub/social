// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// User model - absolute minimum with only authentication data
model User {
  id                String    @id @default(uuid())
  email             String    @unique
  hashedPassword    String
  
  // One-to-one relation with Profile
  profile           Profile?

  @@index([email])
}

// Profile model - all user information including activity references
model Profile {
  id               String     @id @default(uuid())
  userId           String     @unique
  firstName        String
  lastName         String
  username         String     @unique
  bio              String?    @db.Text
  avatarUrl        String?
  coverImageUrl    String?
  location         String?
  website          String?
  birthday         DateTime
  phoneNumber      String?
  gender           GENDER     
  isVerified       Boolean    @default(false)
  isActive         Boolean    @default(true)
  lastActive       DateTime   @default(now())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  
  // One-to-one relation with User
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // One-to-many relations for user activities
  posts            Post[]
  likes            Like[]
  comments         Comment[]
  
  // Followers/Following system
  followers        Follow[]   @relation("ProfileFollowers")
  following        Follow[]   @relation("ProfileFollowing")

  @@index([username])
  @@index([firstName, lastName])
}

// Post model with efficient indexes
model Post {
  id               String     @id @default(uuid())
  content          String     @db.Text
  profileId        String
  published        Boolean    @default(true)
  imageUrls        String[]   // Array of image URLs
  videoUrl         String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  
  // Relations
  profile          Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  likes            Like[]
  comments         Comment[]
  
  @@index([profileId])
  @@index([createdAt])
}

// Efficient Like model with composite primary key
model Like {
  postId           String
  profileId        String
  createdAt        DateTime   @default(now())
  
  // Relations
  post             Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  profile          Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Composite primary key - more efficient than separate id + unique constraint
  @@id([postId, profileId])
  @@index([profileId])
  @@index([createdAt])
}

// Comment model with parent-child relationship for nested comments
model Comment {
  id               String     @id @default(uuid())
  content          String     @db.Text
  postId           String
  profileId        String
  parentId         String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  
  // Relations
  post             Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  profile          Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  parent           Comment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies          Comment[]  @relation("CommentReplies")
  
  @@index([postId])
  @@index([profileId])
  @@index([parentId])
  @@index([createdAt])
}

// Follow model with composite primary key for followers/following relationship
model Follow {
  followerId       String
  followingId      String
  createdAt        DateTime   @default(now())
  
  // Relations
  follower         Profile    @relation("ProfileFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following        Profile    @relation("ProfileFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  
  // Composite primary key - more efficient than separate id + unique constraint
  @@id([followerId, followingId])
  @@index([createdAt])
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}